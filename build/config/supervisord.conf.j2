[supervisord]
nodaemon=true          # Run supervisord in foreground (don't daemonize)
logfile=/dev/stdout    # Send log output to stdout for container logging
logfile_maxbytes=0     # Disable log rotation (unlimited log size)
pidfile=/tmp/supervisord.pid  # Location of the supervisord process ID file
silent=false           # Enable verbose output
loglevel=info          # Set logging level to info
minfds=1024           # Minimum number of file descriptors available
minprocs=200          # Minimum number of process descriptors available

[unix_http_server]
file=/tmp/supervisor.sock  # Unix socket file for supervisorctl communication
chmod=0700                 # Restrict socket access to owner only

{% if supervisord_ui_port %}
[inet_http_server]
; Supervisord web interface - enabled because SUPERVISORD_UI_PORT is set
port={{ supervisord_ui_port }}
username={{ supervisord_ui_user }}
password={{ supervisord_ui_pass }}
{% endif %}

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock  # URL for supervisorctl to connect to supervisord

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface  # RPC interface factory

[program:settings]
## make sure setting for this container are initialized.
command=init_container_settings  # Command to run for initialization
priority=5                       # Start order priority (lower numbers start first)
autorestart=false                # Don't restart this program automatically
autostart=true                   # Start this program when supervisord starts
exitcodes=0                      # Expected exit code for successful completion
startsecs=0                      # Seconds program must stay running to be considered started
stdout_logfile=/dev/stdout       # Send stdout to container's stdout
stdout_logfile_maxbytes=0        # Disable stdout log rotation
stderr_logfile=/dev/stderr       # Send stderr to container's stderr
stderr_logfile_maxbytes=0        # Disable stderr log rotation

[program:xvfb]
## start virtual frame buffer.
# creates screen screennum and sets its width, height, and depth to W, H, and D respectively.
command=start_xvfb               # Command to start X virtual framebuffer
autorestart=true                 # Restart program if it exits unexpectedly
autostart=true                   # Start this program when supervisord starts
priority=10                      # Start order priority (after settings)
startsecs=15                     # Seconds program must stay running to be considered started
startretries=3                   # Number of restart attempts before giving up
stdout_logfile=/dev/stdout       # Send stdout to container's stdout
stdout_logfile_maxbytes=0        # Disable stdout log rotation
stderr_logfile=/dev/stderr       # Send stderr to container's stderr
stderr_logfile_maxbytes=0        # Disable stderr log rotation

[program:ibc]
## start IBC (Interactive Brokers Controller).
# This runs the IBC application which controls TWS/Gateway
command=start_ibc                # Command to start Interactive Brokers Controller
autorestart=true                 # Restart program if it exits unexpectedly
autostart=true                   # Start this program when supervisord starts
priority=20                      # Start order priority (after xvfb)
startsecs=120                    # Seconds program must stay running to be considered started
startretries=3                   # Number of restart attempts before giving up
stopwaitsecs=60                  # Seconds to wait for graceful shutdown before killing
stopsignal=TERM                  # Signal to send for graceful shutdown
# kill java child processes and threads.
killasgroup=true                 # Kill entire process group when stopping
stopasgroup=true                 # Send stop signal to entire process group
depends_on=xvfb,settings         # Wait for xvfb and settings to start first
stdout_logfile=/dev/stdout       # Send stdout to container's stdout
stdout_logfile_maxbytes=0        # Disable stdout log rotation
stderr_logfile=/dev/stderr       # Send stderr to container's stderr
stderr_logfile_maxbytes=0        # Disable stderr log rotation

[program:x11vnc]
## start VNC server.
# display: X11 server display to connect to.
# forever: Keep listening for more connections rather than exiting as soon as the first client(s) disconnect.
# shared: VNC display is shared, i.e. more than one viewer can connect at the same time.
# bg: Go into the background after screen setup. Messages to stderr are lost unless -o logfile is used.
# noipv6: Do not try to use IPv6 for any listening or connecting sockets.
# logappend: Write stderr messages to file logfile instead of to the terminal.
command=start_vnc                # Command to start VNC server
autorestart=true                 # Restart program if it exits unexpectedly
autostart=true                   # Start this program when supervisord starts
priority=30                      # Start order priority (after IBC)
startsecs=15                     # Seconds program must stay running to be considered started
startretries=5                   # Number of restart attempts before giving up
depends_on=xvfb                  # Wait for xvfb to start before starting this program
stdout_logfile=/dev/stdout       # Send stdout to container's stdout
stdout_logfile_maxbytes=0        # Disable stdout log rotation
stderr_logfile=/dev/stderr       # Send stderr to container's stderr
stderr_logfile_maxbytes=0        # Disable stderr log rotation
